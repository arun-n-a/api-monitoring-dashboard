"""Staging migration

Revision ID: 680053e6778d
Revises: c0622fbe95ae
Create Date: 2025-08-04 14:09:07.299647

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '680053e6778d'
down_revision: Union[str, Sequence[str], None] = 'c0622fbe95ae'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    pass


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'prompt', type_='foreignkey')
    op.create_foreign_key(op.f('prompt_created_by_fkey'), 'prompt', 'user', ['created_by'], ['id'])
    op.drop_constraint(None, 'folder', type_='foreignkey')
    op.create_foreign_key(op.f('folder_created_by_fkey'), 'folder', 'user', ['created_by'], ['id'])
    op.drop_constraint(None, 'document_type', type_='foreignkey')
    op.create_foreign_key(op.f('document_type_created_by_fkey'), 'document_type', 'user', ['created_by'], ['id'])
    op.drop_constraint(None, 'document_revision_history', type_='foreignkey')
    op.create_foreign_key(op.f('document_revision_history_user_id_fkey'), 'document_revision_history', 'user', ['user_id'], ['id'])
    op.drop_constraint(None, 'document_accessible_member', type_='foreignkey')
    op.create_foreign_key(op.f('document_accessible_member_user_id_fkey'), 'document_accessible_member', 'user', ['user_id'], ['id'])
    op.drop_constraint(None, 'document', type_='foreignkey')
    op.create_foreign_key(op.f('document_created_by_fkey'), 'document', 'user', ['created_by'], ['id'])
    op.drop_constraint(None, 'department', type_='foreignkey')
    op.create_foreign_key(op.f('department_created_by_fkey'), 'department', 'user', ['created_by'], ['id'])
    op.drop_constraint(None, 'category', type_='foreignkey')
    op.create_foreign_key(op.f('category_created_by_fkey'), 'category', 'user', ['created_by'], ['id'])
    op.create_table('user',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('permissions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('department_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('invited_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('registered_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('invited_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['department_id'], ['department.id'], name=op.f('user_department_id_fkey')),
    sa.ForeignKeyConstraint(['invited_by'], ['user.id'], name=op.f('user_invited_by_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('user_pkey'))
    )
    op.create_index(op.f('ix_user_last_name'), 'user', ['last_name'], unique=False)
    op.create_index(op.f('ix_user_is_deleted'), 'user', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_user_is_active'), 'user', ['is_active'], unique=False)
    op.create_index(op.f('ix_user_id'), 'user', ['id'], unique=False)
    op.create_index(op.f('ix_user_first_name'), 'user', ['first_name'], unique=False)
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.drop_index(op.f('ix_users_last_name'), table_name='users')
    op.drop_index(op.f('ix_users_is_deleted'), table_name='users')
    op.drop_index(op.f('ix_users_is_active'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_first_name'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
